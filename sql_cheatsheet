SQL COMMANDS:


CREATE DATABASE <db-name> = creating a database

DROP DATABASE <db-name> = deleting a database

CREATE TABLE table_name (
        row_name + data_type + constraints_if_any
) ;

Important constraints = NOT NULL, PRIMARY KEY, UNIQUE, FOREIGN KEY

DROP TABLE <table_name> = delete a table

SELECT * FROM <table_name> = view all columns of a table


SELECT <column1>, <column2> FROM <table_name> -> view column(s) of a table

SELECT * FROM <table_name> ORDER BY <column1>, <column2> ASC / DESC -> view a table with ascending or descending order of one or a number of columns

SELECT DISTINCT <column> FROM <table> -> receive an output with duplicate records only shown once for each

WHERE -> It's used to filter data based on custom conditions. Also 'AND' is used for combining 2 or more conditions. ex:
SELECT <column> FROM <table_name> WHERE <condition, ex: gender = 'Male' AND country = 'Iran'> ;

SELECT * FROM <table_name> LIMIT <n> -> "LIMIT" is used to limit the number of records in the output.

SELECT * FROM <table_name> OFFSET <n> LIMIT <m> -> 'OFFSET' is used to declare the starting point (default is 0). For example when we want 11th to 25th record from out table to be shown (skip the first 10 and give me the next 15):

SELECT * FROM <table_name> OFFSET 10 LIMIT 15 ;

another way to declare this:
SELECT * FROM <table_name> OFFSET 10 FIRST 15 ROW ONLY ;


SELECT * FROM person WHERE country IN ('Iran', 'China', 'USA') ;
this can be used when a row record should be a part of a defined set


Also when we need our records to be in a RANGE, we'd go like this:
SELECT * FROM person WHERE date_of_birth BETWEEN DATE '2000-01-01' AND '2016-01-01'
Notice how we put date_of_birth inside cotations and declared that it's a DATE data type.

LIKE: like is used to match values against a pattern using wild cards. for example for finding all records that 'x' exists in the value:

SELECT * FROM <table> WHERE <column> LIKE '%x%' ;

also, the underscore _  displays a variable character. when we want to receive all records that has 3 chars before 'x':

SELECT * FROM <table> WHERE <column> LIKE '%___x%'

in order to let SQL forget about case-sensitivity in our input, we can use 'ILIKE' keyword :
SELECT * FROM <table> WHERE <column> ILIKE '%___X%'

to insert a record to a table:
INSERT INTO <table_name> (column1, column2, ...) VALUES (value1, value2, ...);



GROUP BY:
allows us to group data based on a column.
fof example, let's say we want to know how many people are there in each coutnry?
SELECT <country> COUNT(*) FROM <table> GROUP BY <country>

GROUP BY HAVING:
having an extra filtering after the aggregation.
i.e. in the example above, let's say we want to know how many people are there in each coutnry, but ONLY for countries with more then 5 people in our table:

SELECT <country> COUNT(*) FROM <table> GROUP BY <country> HAVING COUNT(*) > 5







POSTGRESQL COMMANDS:

psql <db_name> -> open psql CLI to work on a defined database

\i <file_path> -> run commands from a file
